#######################################################
# CS:APP bomblab
# 教师指南
#
# 版权所有 (c) 2003-2016，R. Bryant 和 D. O'Hallaron
#
#######################################################

此目录包含用于构建和运行CS:APPbomblab所需的文件。bomblab教导学生机器级程序原理，以及一般的调试器和逆向工程技能。

***********
1. 概述
***********

----
1.1. 二进制炸弹
----
一个“二进制炸弹”是一个Linux可执行C程序，由六个“阶段”组成。每个阶段期望学生在标准输入上输入特定字符串。如果学生输入了预期的字符串，则该阶段被“解除”。否则，炸弹会通过打印“BOOM!!!”而“爆炸”。学生的任务是尽可能多地解除各个阶段。

----
1.2. 解除二进制炸弹
----
为了拆除炸弹，学生必须使用调试器（通常是gdb或ddd）来反汇编二进制文件，并逐条执行每个阶段的机器码。目的是理解每条汇编语句的作用，然后利用这些知识推断出解除字符串。学生因解除阶段而获得分数，并因每次爆炸而失去分数（教师可配置，但通常为0.5分）。因此，他们很快学会在每个阶段前和炸弹爆炸函数处设置断点。这是一个很好的课程，迫使他们学习如何使用调试器。

----
1.3. 自动评分服务
----
我们创建了一个独立的用户级自动评分服务，可以处理bomblab的所有方面：学生从服务器下载炸弹。当学生处理他们的炸弹时，每次爆炸和解除都会被流回到服务器，在那里当前每个炸弹的结果会在Web“记分板”上显示。没有明确的提交过程，lab是自我评分的。

自动评分服务由四个用户级程序组成，它们运行在主./bomblab目录中：

- 请求服务器（bomblab-requestd.pl）。学生通过指向一个简单的HTTP服务器（称为“请求服务器”的浏览器）下载炸弹并显示记分板。请求服务器构建炸弹，将其存档到tar文件中，然后将结果tar文件上传回浏览器，在那里它可以保存到磁盘并解压。请求服务器还为教师创建炸弹及其解决方案的副本。

- 结果服务器（bomblab-resultd.pl）。每当学生解除炸弹阶段或导致爆炸时，炸弹会发送一个简短的HTTP消息（称为“自动结果字符串”）到HTTP“结果服务器”，后者只是将自动结果字符串附加到“记分板日志文件”。

- 报告守护进程（bomblab-reportd.pl）。“报告守护进程”定期扫描记分板日志文件。报告守护进程找到每个学生最近提交的每个阶段的解除字符串，并通过将这些字符串应用到学生炸弹的本地副本上来验证这些字符串。然后它更新总结每个炸弹当前爆炸和解除数量的HTML记分板，并按累积总分排名。

- 主守护进程（bomblab.pl）。“主守护进程”启动并管理请求服务器、结果服务器和报告守护进程，确保任何时候只有一个这样的进程（以及自身）在运行。如果其中一个进程因某种原因死亡，主守护进程会检测到这一点并自动重启它。主守护进程是您实际需要运行的唯一程序。

********
2. 文件
********
./bomblab目录包含以下文件：

Makefile                - 用于启动/停止lab和清理文件
bomblab.pl*             - 管理其他服务器和守护进程的主要守护进程
Bomblab.pm              - bomblab配置文件    
bomblab-reportd.pl*     - 不断更新记分板的报告守护进程
bomblab-requestd.pl*    - 向学生提供炸弹的请求服务器
bomblab-resultd.pl*     - 从炸弹接收自动结果字符串的结果服务器
bomblab-scoreboard.html - 实时Web记分板
bomblab-update.pl*      - 更新记分板的帮助程序
bombs/                  - 包含发送给每个学生的炸弹
log-status.txt          - 包含来自各种服务器和守护进程的消息的状态日志
log.txt                 - 来自炸弹的自动结果记分板日志
makebomb.pl*            - 构建炸弹的帮助脚本
scores.txt              - 总结每个学生的当前记分板得分
src/                    - 炸弹源文件
writeup/                - 示例Latexbomblab说明

*******************
3. 炸弹术语
*******************

实验ID：每个实例（提供）的lab由一个唯一的名称标识，例如"f12"或"s13"，由讲师选择。不同实验ID的炸弹的爆炸和解除将被忽略。实验ID不能包含任何空格。

炸弹ID：给定lab实例中的每个炸弹都有一个唯一的非负整数，称为“炸弹ID”。

通知炸弹：炸弹可以与NOTIFY选项一起编译，这使得炸弹在学生每次爆炸或解除阶段时发送消息。这种炸弹被称为“通知炸弹”。

静默炸弹：如果用NONOTIFY选项编译，则炸弹在爆炸或解除时不会发送任何消息。这种炸弹被称为“静默炸弹”。

我们还将区分自定义炸弹和通用炸弹：

自定义炸弹：一个“自定义炸弹”的炸弹ID > 0，与特定学生关联，并且可以是通知炸弹或静默炸弹。自定义通知炸弹受限于只能在讲师确定的一组特定Linux主机上运行。另一方面，自定义静默炸弹可以在任何Linux主机上运行。

通用炸弹：一个“通用炸弹”的炸弹ID = 0，不与任何特定学生关联，是静默的，因此可以在任何主机上运行。

************************
4. 提供bomblab
************************
有两种基本类型的bomblab：“在线”版本中，讲师使用自动评分服务根据需求向每位学生发放自定义通知炸弹，并实时跟踪他们在记分板上的进度。“离线”版本中，讲师手动构建、发放和评分学生炸弹，而不使用自动评分服务。

虽然两个版本都能给学生丰富的体验，但我们推荐在线版本。对学生来说，它是最引人入胜和有趣的，而且对于讲师来说最容易评分。然而，它要求您保持自动评分服务不间断运行，因为手稿、评分和报告在整个lab期间持续进行。我们已经使其非常容易运行该服务，但有些讲师可能对这个要求感到不安，并选择离线版本。

以下是提供这两个版本lab的指南。

---
4.1. 创建bomblab目录 
---
确定您将在哪个通用Linux机器（$SERVER_NAME）上创建bomblab目录（./bomblab），如果您提供在线版本，也将在该目录运行自动评分服务。您只需要在这个机器上有用户账户。您不需要root权限。

每次提供bomblab都应从一个新的干净的./bomblab目录开始。例如：

    linux> tar xvf bomblab.tar
    linux> cd bomblab   
    linux> make cleanallfiles

---
4.2 配置bomblab
---
通过编辑以下文件来配置bomblab：

./Bomblab.pm - 这是主要配置文件。您只需修改或检查此文件第1节中的几个变量。每个变量前面都有描述性注释。如果您提供离线版本，您可以忽略大多数这些设置。

如果您提供在线版本，您还需要编辑以下文件：

./src/config.h - 此文件列出了允许通知炸弹运行的主机域名。请确保正确更新此文件，否则您和您的学生将无法运行炸弹。

----
4.3. 更新lab说明
---

一旦您更新了配置文件，请修改./writeup/bomblab.tex中的Latexlab说明以适应您的环境。然后在./writeup目录中键入以下命令：

	unix> make clean
	unix> make 

这将创建ps和pdf版本的说明

---
4.4. 运行在线bomblab
---

------
4.4.1. 简短版
------
从./bomblab目录：

(1) 通过键入重置bomblab
    linux> make cleanallfiles

(2) 通过键入启动自动评分服务
    linux> make start

(3) 通过键入停止自动评分服务
    linux> make stop    

您可以根据需要频繁启动和停止自动评分服务，而不会丢失任何信息。如果有疑问，“make stop; make start”会让一切恢复正常状态。

但是，重置lab会删除所有旧炸弹、状态日志和记分板日志。仅在调试期间或您第一次为学生启动lab时这样做。

学生通过将浏览器指向以下地址请求炸弹：
    http://$SERVER_NAME:$REQUESTD_PORT/

学生通过将浏览器指向以下地址查看记分板：
    http://$SERVER_NAME:$REQUESTD_PORT/scoreboard 

------
4.4.2. 详细版
------

(1) 重置bomblab。"make stop"确保没有服务器在运行。"make cleanallfiles"从头开始重置lab，删除特定于特定lab实例的所有数据，如状态日志、请求服务器创建的所有炸弹和记分板日志。当您准备好让学生访问lab时，请执行此操作。

在准备lab期间，重置也很有用。在lab上线之前，您可能希望为自己请求一些炸弹，运行它们，解除一些阶段，引爆一些阶段，并确保结果正确显示在记分板上。 如果有问题


#######################################################
# CS:APP Bomb Lab
# Directions to Instructors
#
# Copyright (c) 2003-2016, R. Bryant and D. O'Hallaron
#
#######################################################

This directory contains the files that you will use to build and run
the CS:APP Bomb Lab. The Bomb Lab teaches students principles of
machine-level programs, as well as general debugger and reverse
engineering skills.

***********
1. Overview
***********

----
1.1. Binary Bombs
----
A "binary bomb" is a Linux executable C program that consists of six
"phases." Each phase expects the student to enter a particular string
on stdin.  If the student enters the expected string, then that phase
is "defused."  Otherwise the bomb "explodes" by printing "BOOM!!!".
The goal for the students is to defuse as many phases as possible.

----
1.2. Solving Binary Bombs
----
In order to defuse the bomb, students must use a debugger, typically
gdb or ddd, to disassemble the binary and single-step through the
machine code in each phase. The idea is to understand what each
assembly statement does, and then use this knowledge to infer the
defusing string.  Students earn points for defusing phases, and they
lose points (configurable by the instructor, but typically 1/2 point)
for each explosion. Thus, they quickly learn to set breakpoints before
each phase and the function that explodes the bomb. It's a great
lesson and forces them to learn to use a debugger.

----
1.3. Autograding Service
----
We have created a stand-alone user-level autograding service that
handles all aspects of the Bomb Lab for you: Students download their
bombs from a server. As the students work on their bombs, each
explosion and defusion is streamed back to the server, where the
current results for each bomb are displayed on a Web "scoreboard."
There are no explicit handins and the lab is self-grading.

The autograding service consists of four user-level programs that run
in the main ./bomblab directory:

- Request Server (bomblab-requestd.pl). Students download their bombs
and display the scoreboard by pointing a browser at a simple HTTP
server called the "request server." The request server builds the
bomb, archives it in a tar file, and then uploads the resulting tar
file back to the browser, where it can be saved on disk and
untarred. The request server also creates a copy of the bomb and its
solution for the instructor.

- Result Server (bomblab-resultd.pl). Each time a student defuses a
bomb phase or causes an explosion, the bomb sends a short HTTP
message, called an "autoresult string," to an HTTP "result server,"
which simply appends the autoresult string to a "scoreboard log file."

- Report Daemon (bomblab-reportd.pl). The "report daemon" periodically
scans the scoreboard log file. The report daemon finds the most recent
defusing string submitted by each student for each phase, and
validates these strings by applying them to a local copy of the
student's bomb.  It then updates the HTML scoreboard that summarizes
the current number of explosions and defusions for each bomb, rank
ordered by the total number of accrued points.

- Main daemon (bomblab.pl). The "main daemon" starts and nannies the
request server, result server, and report deamon, ensuring that
exactly one of these processes (and itself) is running at any point in
time. If one of these processes dies for some reason, the main daemon
detects this and automatically restarts it. The main daemon is the
only program you actually need to run.

********
2. Files
********
The ./bomblab directory contains the following files:

Makefile                - For starting/stopping the lab and cleaning files
bomblab.pl*             - Main daemon that nannies the other servers & daemons
Bomblab.pm              - Bomblab configuration file    
bomblab-reportd.pl*     - Report daemon that continuously updates scoreboard
bomblab-requestd.pl*    - Request server that serves bombs to students
bomblab-resultd.pl*     - Result server that gets autoresult strings from bombs
bomblab-scoreboard.html - Real-time Web scoreboard
bomblab-update.pl*      - Helper to bomblab-reportd.pl that updates scoreboard
bombs/                  - Contains the bombs sent to each student
log-status.txt          - Status log with msgs from various servers and daemons
log.txt                 - Scoreboard log of autoresults received from bombs
makebomb.pl*            - Helper script that builds a bomb
scores.txt              - Summarizes current scoreboard scores for each student
src/                    - The bomb source files
writeup/                - Sample Latex Bomb Lab writeup

*******************
3. Bomb Terminology
*******************

LabID: Each instance (offering) of the lab is identified by a unique
name, e.g., "f12" or "s13", that the instructor chooses. Explosion and
diffusions from bombs whose LabIDs are different from the current
LabID are ignored. The LabID must not have any spaces.

BombID: Each bomb in a given instance of the lab has a unique
non-negative integer called the "bombID."

Notifying Bomb: A bomb can be compiled with a NOTIFY option that
causes the bomb to send a message each time the student explodes or
defuses a phase. Such bombs are called "notifying bombs." 

Quiet Bomb: If compiled with the NONOTIFY option, then the bomb
doesn't send any messages when it explodes or is defused. Such bombs
are called "quiet bombs."

We will also find it helpful to distinguish between custom and
generic bombs:

Custom Bomb: A "custom bomb" has a BombID > 0, is associated with a
particular student, and can be either notifying or quiet. Custom
notifying bombs are constrained to run on a specific set of Linux
hosts determined by the instructor. On the other hand, custom quiet
bombs can run on any Linux host.

Generic Bomb: A "generic bomb" has a BombID = 0, isn't associated with
any particular student, is quiet, and hence can run on any host.

************************
4. Offering the Bomb Lab
************************
There are two basic flavors of Bomb Lab: In the "online" version, the
instructor uses the autograding service to handout a custom notifying
bomb to each student on demand, and to automatically track their
progress on the realtime scoreboard. In the "offline" version, the
instructor builds, hands out, and grades the student bombs manually,
without using the autograding service.

While both version give the students a rich experience, we recommend
the online version. It is clearly the most compelling and fun for the
students, and the easiest for the instructor to grade. However, it
requires that you keep the autograding service running non-stop,
because handouts, grading, and reporting occur continuously for the
duration of the lab. We've made it very easy to run the service, but
some instructors may be uncomfortable with this requirement and will
opt instead for the offline version.

Here are the directions for offering both versions of the lab.

---
4.1. Create a Bomb Lab Directory 
---
Identify the generic Linux machine ($SERVER_NAME) where you will
create the Bomb Lab directory (./bomblab) and, if you are offering the
online version, run the autograding service. You'll only need to have
a user account on this machine. You don't need root access.

Each offering of the Bomb Lab starts with a clean new ./bomblab
directory on $SERVER_NAME. For example:

    linux> tar xvf bomblab.tar
    linux> cd bomblab   
    linux> make cleanallfiles

---
4.2 Configure the Bomb Lab
---
Configure the Bomb Lab by editing the following file:

./Bomblab.pm - This is the main configuration file. You will only need
to modify or inspect a few variables in Section 1 of this file. Each
variable is preceded by a descriptive comment. If you are offering the
offline version, you can ignore most of these settings.

If you are offering the online version, you will also need to edit the 
following file:

./src/config.h - This file lists the domain names of the hosts that
notifying bombs are allowed to run on. Make sure you update this
correctly, else you and your students won't be able to run your bombs.

----
4.3. Update the Lab Writeup
---

Once you have updated the configuration files, modify the Latex lab
writeup in ./writeup/bomblab.tex for your environment. Then type the
following in the ./writeup directory:

	unix> make clean
	unix> make 

This will create ps and pdf versions of the writeup

---
4.4. Running the Online Bomb Lab
---

------
4.4.1. Short Version
------
From the ./bomblab directory:

(1) Reset the Bomb Lab from scratch by typing
    linux> make cleanallfiles

(2) Start the autograding service by typing
    linux> make start

(3) Stop the autograding service by typing
    linux> make stop    

You can start and stop the autograding service as often as you like
without losing any information. When in doubt "make stop; make start"
will get everything in a stable state. 

However, resetting the lab deletes all old bombs, status logs, and the
scoreboard log. Do this only during debugging, or the very first time
you start the lab for your students.

Students request bombs by pointing their browsers at 
    http://$SERVER_NAME:$REQUESTD_PORT/

Students view the scoreboard by pointing their browsers at      
    http://$SERVER_NAME:$REQUESTD_PORT/scoreboard 

------
4.4.2. Long Version
------

(1) Resetting the Bomb Lab. "make stop" ensures that there are no
servers running. "make cleanallfiles" resets the lab from scratch,
deleting all data specific to a particular instance of the lab, such
as the status log, all bombs created by the request server, and the
scoreboard log. Do this when you're ready for the lab to go "live" to
the students.

Resetting is also useful while you're preparing the lab. Before the
lab goes live, you'll want to request a few bombs for yourself, run
them, defuse a few phases, explode a few phases, and make sure that
the results are displayed properly on the scoreboard.  If there is a
problem (say because you forgot to update the list of machines the
bombs are allowed to run in src/config.h) you can fix the
configuration, reset the lab, and then request and run more test
bombs.

CAUTION: If you reset the lab after it's live, you'll lose all your
records of the students bombs and their solutions. You won't be able
to validate the students handins. And your students will have to get
new bombs and start over.

(2) Starting the Bomb Lab. "make start" runs bomblab.pl, the main
daemon that starts and nannies the other programs in the service,
checking their status every few seconds and restarting them if
necessary:

(3) Stopping the Bomb Lab. "make stop" kills all of the running
servers. You can start and stop the autograding service as often as
you like without losing any information. When in doubt "make stop;
make start" will get everything in a stable state.

Request Server: The request server is a simple special-purpose HTTP
server that (1) builds and delivers custom bombs to student browsers
on demand, and (2) displays the current state of the real-time
scoreboard.

A student requests a bomb from the request daemon in two
steps: First, the student points their favorite browser at

    http://$SERVER_NAME:$REQUESTD_PORT/

For example, http://foo.cs.cmu.edu:15213/.  The request server
responds by sending an HTML form back to the browser.  Next, the
student fills in this form with their user name and email address, and
then submits the form. The request server parses the form, builds and
tars up a notifying custom bomb with bombID=n, and delivers the tar
file to the browser. The student then saves the tar file to disk. When
the student untars this file, it creates a directory (./bomb<n>) with
the following four files:

    bomb*        Notifying custom bomb executable
    bomb.c       Source code for the main bomb routine
    ID           Identifies the student associated with this bomb
    README       Lists bomb number, student, and email address


The request server also creates a directory (bomblab/bombs/bomb<n>)
that contains the following files:

    bomb*        Custom bomb executable 
    bomb.c       Source code for main routine
    bomb-quiet*  A quiet version of bomb used for autograding
    ID           Identifies the user name assigned to this bomb
    phases.c     C source code for the bomb phases
    README       Lists bombID, user name, and email address
    solution.txt The solution for this bomb


Result Server: Each time a student defuses a phase or explodes their
bomb, the bomb sends an HTTP message (called an autoresult string) to
the result server, which then appends the message to the scoreboard
log. Each message contains a BombID, a phase, and an indication of the
event that occurred.  If the event was a defusion, the message also
contains the "defusing string" that the student typed to defuse the
phase.

Report Daemon: The report daemon periodically scans the scoreboard log
and updates the Web scoreboard. For each bomb, it tallies the number
of explosions, the last defused phase, validates each last defused
phase using a quiet copy of the bomb, and computes a score for each
student in a tab delimited text file called "scores.txt." The update
frequency is a configuration variable in Bomblab.pm.

Instructors and students view the scoreboard by pointing their
browsers at:

    http://$SERVER_NAME:$REQUESTD_PORT/scoreboard 

------
4.4.3. Grading the Online Bomb Lab
------
The online Bomb Lab is self-grading. At any point in time, the
tab-delimited file (./bomblab/scores.txt) contains the most recent
scores for each student. This file is created by the report daemon
each time it generates a new scoreboard.

------
4.4.4. Additional Notes on the Online Bomb Lab
------
* Since the request server and report daemon both need to execute
bombs, you must include $SERVER_NAME in the list of legal machines in
your bomblab/src/config.h file.

* All of the servers and daemons are stateless, so you can stop ("make
stop") and start ("make start") the lab as many times as you like
without any ill effects. If you accidentally kill one of the daemons,
or you modify a daemon, or the daemon dies for some reason, then use
"make stop" to clean up, and then restart with "make start". If your
Linux box crashes or reboots, simply restart the daemons with "make
start".

* Information and error messages from the servers are appended to the
"status log" in bomblab/log-status.txt. Servers run quietly, so they
can be started from initrc scripts at boot time.

* See src/README for more information about the anatomy of bombs and
how they are constructed. You don't need to understand any of this to
offer the lab. It's provided only for completeness.

* Before going live with the students, we like to check everything out
by running some tests. We do this by typing

    linux> make cleanallfiles   
    linux> make start

Then we request a bomb for ourselves by pointing a Web browser at

    http://$SERVER_NAME:$REQUESTD_PORT

After saving our bomb to disk, we untar it, copy it to a host in the
approved list in src/config.h, and then explode and defuse it a couple
of times to make sure that the explosions and diffusion are properly
recorded on the scoreboard, which we check at

    http://$SERVER_NAME:$REQUESTD_PORT/scoreboard

Once we're satisfied that everything is OK, we stop the lab

    linux> make stop

and then go live:

    linux> make cleanallfiles
    linux> make start
        
Once we go live, we type "make stop" and "make start" as often as we
need to, but we are careful never to type "make cleanallfiles" again.

----
4.5. Running the Offline Bomb Lab
----
In this version of the lab, you build your own quiet bombs manually
and then hand them out to the students.  The students work on defusing
their bombs offline (i.e., independently of any autograding service)
and then handin their solution files to you, each of which you grade
manually.

You can use the makebomb.pl script to build your own bombs
manually. The makebomb.pl script also generates the bomb's solution.
Type "./makebomb.pl -h" to see its arguments.

Option 1: The simplest approach for offering the offline Bomb Lab is
to build a single generic bomb that every student attempts to defuse:

    linux> ./makebomb.pl -s ./src -b ./bombs

This will create a generic bomb and some other files in ./bombs/bomb0: 

    bomb*        Generic bomb executable (handout to students)
    bomb.c       Source code for main routine (handout to students)
    bomb-quiet*  Ignore this
    ID           Ignore this
    phases.c     C source code for the bomb phases
    README       Ignore this    
    solution.txt The solution for this bomb 

You will handout only two of these files to the students: ./bomb and ./bomb.c 

The students will handin their solution files, which you can validate
by feeding to the bomb:

    linux> cd bombs/bomb0
    linux> ./bomb < student_solution.txt

This option is easy for the instructor, but we don't recommend it
because it is too easy for the students to cheat.

Option 2. The other option for offering an offline lab is to use the
makebomb.pl script to build a unique quiet custom bomb for each
student:

    linux> ./makebomb.pl -i <n> -s ./src -b ./bombs -l bomblab -u <email> -v <uid>

This will create a quiet custom bomb in ./bombs/bomb<n> for the
student whose email address is <email> and whose user name is <uid>:

    bomb*        Custom bomb executable (handout to student)
    bomb.c       Source code for main routine (handout to student)
    bomb-quiet*  Ignore this
    ID           Identifies the student associated with this bomb
    phases.c     C source code for the bomb phases
    README       Lists bomb number, student, and email address
    solution.txt The solution for this bomb

You will handout four of these files to the student: bomb, bomb.c, ID,
and README.

Each student will hand in their solution file, which you can validate
by hand by running their custom bomb against their solution:

    linux> cd ./bombs/bomb<n>
    linux> ./bomb < student_n_solution.txt

The source code for the different phase variants is in ./src/phases/.



